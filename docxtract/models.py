"""
Pydantic v2 data models for docxtract.

Defines structured representations for:
- Document sections (DocumentSection)
- Complete extracted documents (ExtractedDocument)
- Summary requests (SummaryRequest)

These models are used for validation, type safety, and data interchange across the pipeline.

See .github/copilot-instructions.md for documentation and code style standards.
"""

from typing import List, Optional

from pydantic import BaseModel, Field


class DocumentSection(BaseModel):
    """Represents a section of an academic paper."""

    title: str = Field(description="Section title (e.g., 'Abstract', 'Introduction')")
    content: str = Field(description="Text content of the section")
    page_numbers: Optional[List[int]] = Field(
        default=None, description="Page numbers where this section appears"
    )


class ExtractedDocument(BaseModel):
    """Complete extracted document with all sections."""

    title: Optional[str] = Field(default=None, description="Document title if detected")
    summary_zh: Optional[str] = Field(
        default=None, description="Chinese summary generated by GPT-4.1"
    )
    sections: List[DocumentSection] = Field(
        default_factory=list, description="All extracted sections"
    )
    source_file: str = Field(description="Path to source PDF file")

    def get_section(self, section_name: str) -> Optional[DocumentSection]:
        """Get a specific section by name."""
        for section in self.sections:
            if section.title.lower() == section_name.lower():
                return section
        return None

    def has_section(self, section_name: str) -> bool:
        """Check if document has a specific section."""
        return self.get_section(section_name) is not None


class SummaryRequest(BaseModel):
    """Request model for generating Chinese summary."""

    document_content: str = Field(description="Full document content for summarization")
    title: Optional[str] = Field(default=None, description="Document title")
    focus_areas: Optional[List[str]] = Field(
        # Use default_factory for mutable defaults per Pydantic best practices.
        default_factory=lambda: ["main contributions", "methodology", "results"],
        description="Key areas to focus on in the summary",
    )
